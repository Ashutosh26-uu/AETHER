# AWS CloudFormation Template for AETHER Deployment
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AETHER - AI-Powered Satellite-Integrated Intelligent Mobility System'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
  
  InstanceType:
    Type: String
    Default: 't3.medium'
    AllowedValues: ['t3.small', 't3.medium', 't3.large']

Resources:
  # VPC and Networking
  AETHERVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-VPC-${Environment}'

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AETHERVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-Public-Subnet-${Environment}'

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AETHERVpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-Private-Subnet-${Environment}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-IGW-${Environment}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AETHERVpc
      InternetGatewayId: !Ref InternetGateway

  # Security Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AETHER web servers
      VpcId: !Ref AETHERVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-Web-SG-${Environment}'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AETHER database
      VpcId: !Ref AETHERVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-DB-SG-${Environment}'

  # RDS PostgreSQL Database
  AETHERDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'aether-db-${Environment}'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.4'
      MasterUsername: aether_admin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:aether-db-password-${Environment}:SecretString:password}}'
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-Database-${Environment}'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for AETHER database
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-DB-SubnetGroup-${Environment}'

  # EC2 Instance for Backend
  AETHERBackendInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2
      InstanceType: !Ref InstanceType
      KeyName: aether-keypair
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Start Docker
          systemctl start docker
          systemctl enable docker
          
          # Clone AETHER repository
          cd /home/ec2-user
          git clone https://github.com/your-org/aether.git
          cd aether
          
          # Install Python dependencies
          pip3 install -r requirements.txt
          
          # Start services
          docker-compose up -d
          
      Tags:
        - Key: Name
          Value: !Sub 'AETHER-Backend-${Environment}'

  # S3 Bucket for data storage
  AETHERDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aether-data-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IoT Core for device communication
  AETHERIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub 'AETHERIoTPolicy-${Environment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
              - iot:Subscribe
              - iot:Receive
            Resource: '*'

  # Lambda Functions
  VehicleDataProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'aether-vehicle-processor-${Environment}'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          
          def lambda_handler(event, context):
              # Process vehicle data
              print(f"Processing vehicle data: {json.dumps(event)}")
              
              # Store in database
              # Trigger alerts if necessary
              # Update real-time dashboard
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Vehicle data processed successfully')
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DB_HOST: !GetAtt AETHERDatabase.Endpoint.Address
      Role: !GetAtt LambdaExecutionRole.Arn

  AIModelInferenceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'aether-ai-inference-${Environment}'
      Runtime: python3.9
      Handler: ai_inference.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          
          def lambda_handler(event, context):
              # Run AI model inference
              print(f"Running AI inference: {json.dumps(event)}")
              
              # Load model from S3
              # Process sensor data
              # Return predictions
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'prediction': 'safe',
                      'confidence': 0.95
                  })
              }
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          MODEL_BUCKET: !Ref AETHERDataBucket
      Role: !GetAtt LambdaExecutionRole.Arn

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AETHERLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - rds:DescribeDBInstances
                  - iot:Publish
                Resource: '*'

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High CPU utilization
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref AETHERBackendInstance

  # API Gateway
  AETHERApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'AETHER-API-${Environment}'
      Description: AETHER REST API
      EndpointConfiguration:
        Types:
          - REGIONAL

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref AETHERVpc
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt AETHERDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DB-Endpoint'

  BackendInstanceIP:
    Description: Backend Instance Public IP
    Value: !GetAtt AETHERBackendInstance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-Backend-IP'

  DataBucket:
    Description: S3 Data Bucket Name
    Value: !Ref AETHERDataBucket
    Export:
      Name: !Sub '${AWS::StackName}-Data-Bucket'